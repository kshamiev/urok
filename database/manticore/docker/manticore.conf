searchd {
  listen = 127.0.0.1:9312
  listen = 127.0.0.1:9306:mysql
  listen = 127.0.0.1:9308:http
  listen = 127.0.0.1:9322-9325:replication
  query_log_format = sphinxql
  query_log = /var/log/manticore/query.log
  log = /var/log/manticore/searchd.log
  pid_file = /var/run/manticore/searchd.pid
  network_timeout = 1m
  read_buffer_docs = 512m
  read_buffer_hits = 512m
  read_unhinted = 512m
  max_packet_size = 128m
  max_open_files = 100000
  max_batch_queries = 102400
  docstore_cache_size = 1024m
  threads = 50
  # seamless_rotate = 1
}

common {
  plugin_dir = /usr/local/lib/manticore
  lemmatizer_base = /usr/share/manticore
}

indexer {
  mem_limit = 1024M
  lemmatizer_cache = 256M
}

#### documents

## main

source documents_main {
  type = pgsql
  sql_host = localhost
  sql_user = postgres
  sql_pass = postgres
  sql_db = urok
  sql_port = 5432

  sql_query_pre = INSERT INTO manticore_breaker (index_name, start_at, max_id) \
  VALUES ('documents_main', now(), 0) \
  ON CONFLICT (index_name) DO UPDATE SET start_at = EXCLUDED.start_at, max_id = EXCLUDED.max_id

  sql_query_range = SELECT \
  ( SELECT extract(epoch from MIN(updated_at)::timestamptz) FROM documents ) min, \
  ( SELECT extract(epoch from start_at::timestamptz) FROM manticore_breaker WHERE index_name = 'documents_main') max

  sql_range_step = 100000
  sql_ranged_throttle = 0

  sql_query = SELECT id, title, description, category_id, release_year, price, \
  extract(epoch from created_at::timestamptz) created_at, \
  extract(epoch from updated_at::timestamptz) updated_at, \
  extract(epoch from deleted_at::timestamptz) deleted_at \
  FROM documents WHERE 1 = 1 \
  AND deleted_at IS NULL AND updated_at BETWEEN to_timestamp($start) AND to_timestamp($end)

  sql_query_post_index = UPDATE manticore_breaker SET max_id = $maxid, end_at = now() WHERE index_name = 'documents_main'

  sql_query_post_index = INSERT INTO manticore_breaker (index_name, delta_at) \
  VALUES ('documents_delta', (SELECT start_at FROM manticore_breaker WHERE index_name = 'documents_main')) \
  ON CONFLICT (index_name) DO UPDATE SET delta_at = EXCLUDED.delta_at

  sql_attr_bigint = id
  sql_field_string = title
  sql_attr_bigint = category_id
  sql_attr_uint = release_year
  sql_attr_float = price
  sql_attr_timestamp = created_at
  sql_attr_timestamp = updated_at
  sql_attr_timestamp = deleted_at
}

index documents_main {
  type = plain
  path = /var/lib/manticore/documents_main
  source = documents_main

#  min_stemming_len = 4 # Минимальная длина слова, при которой можно включить выделение корней (не менее).
#  index_sp = 1  # учитывать границы абзацев
#  html_strip = 1 # учитывать границы абзацев (html)
#  index_exact_words = 1 # сохраняет необработанные ключевые слова в индекс (повышает релевантность поиска)

#  charset_table = non_cjk # включение поддержки определённой группы языков (по умолчанию)
  # stopwords = ru en # стоп слова (можно указать путь до файла (может быть несколько))
#  stopwords = ru # стоп слова (можно указать путь до файла (может быть несколько))
  # Словоформы. применяются перед морфологией и отменяют её при нахождении совпадений (может быть несколько)
  # wordforms = /var/lib/manticore/wordforms.txt
  # morphology = lemmatize_ru_all, lemmatize_en_all # морфология
#  morphology = lemmatize_ru_all # морфология
}

## delta

source documents_delta: documents_main {
  sql_query_pre = UPDATE manticore_breaker SET start_at = now(), max_id = 0 WHERE index_name = 'documents_delta'

  sql_query_range = SELECT \
  ( SELECT extract(epoch from delta_at::timestamptz) FROM manticore_breaker WHERE index_name = 'documents_delta') min, \
  extract(epoch from now()::timestamptz) max

  sql_query_killlist = SELECT id FROM documents \
  WHERE deleted_at >= (SELECT delta_at FROM manticore_breaker WHERE index_name = 'documents_delta')

  sql_query_post_index = UPDATE manticore_breaker SET max_id = $maxid, end_at = now() WHERE index_name = 'documents_delta'
}

index documents_delta: documents_main {
  type = plain
  path = /var/lib/manticore/documents_delta
  source = documents_delta

  killlist_target = documents_main
}

##

index documents {
  type = distributed
  local = documents_main
  local = documents_delta
}

####