// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import mockery "github.com/kshamiev/urok/codegen/mockery"

// IOAuthProvider is an autogenerated mock type for the IOAuthProvider type
type IOAuthProvider struct {
	mock.Mock
}

// Exchange provides a mock function with given fields: ctx, code
func (_m *IOAuthProvider) Exchange(ctx context.Context, code string) (*mockery.Employee, error) {
	ret := _m.Called(ctx, code)

	var r0 *mockery.Employee
	if rf, ok := ret.Get(0).(func(context.Context, string) *mockery.Employee); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mockery.Employee)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessToken provides a mock function with given fields: token
func (_m *IOAuthProvider) GetAccessToken(token mockery.Employee) string {
	ret := _m.Called(token)

	var r0 string
	if rf, ok := ret.Get(0).(func(mockery.Employee) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetAuthURL provides a mock function with given fields:
func (_m *IOAuthProvider) GetAuthURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetConfig provides a mock function with given fields:
func (_m *IOAuthProvider) GetConfig() mockery.Employee {
	ret := _m.Called()

	var r0 mockery.Employee
	if rf, ok := ret.Get(0).(func() mockery.Employee); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mockery.Employee)
	}

	return r0
}

// RefreshToken provides a mock function with given fields: ctx, t
func (_m *IOAuthProvider) RefreshToken(ctx context.Context, t string) (*mockery.Employee, error) {
	ret := _m.Called(ctx, t)

	var r0 *mockery.Employee
	if rf, ok := ret.Get(0).(func(context.Context, string) *mockery.Employee); ok {
		r0 = rf(ctx, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mockery.Employee)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
